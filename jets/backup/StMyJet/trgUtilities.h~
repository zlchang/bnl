#ifndef TRG_UTILITIES
#define TGR_UTILITIES
#include<vector>
#include<map>
#include<iostream>
#include<string>

using namespace std;

class StJetCandidate;
class StJetSkimEvent;
class StJetEvent;
class MyJet;

StJetCandidate *FindParJet(StJetCandidate* jet, StJetEvent *evntpar);
float DeltaR(float etaA, float phiA, float etaB, float phiB);
//merge sort
//string JetCategory(StJetCandidate *jetCnd, StJetSkimEvent *skimevnt, int th_plusi = 0);
string JetCategory(MyJet *myjet, StJetSkimEvent *skimevnt, map<string, int>mapTrigShouldFire, map<string, int>mapTrigDidFire, bool flag = 0, int th_plus = 0);
vector<StJetCandidate*> mergesort(vector<StJetCandidate*>, int flag);
vector<StJetCandidate*> merge(vector<StJetCandidate*> a, vector<StJetCandidate*> b, int flag);
//JP triggers
bool MatchJetPatch(StJetCandidate *jetcnd, StJetSkimEvent *skim, int th, int shift = 0);
bool MatchBarrelJetPatch(StJetCandidate *jetcnd, StJetSkimEvent *skim, int th, int shift = 0);
bool MatchEndcapJetPatch(StJetCandidate *jetcnd, StJetSkimEvent *skim, int th, int shift = 0);
bool MatchOverlapJetPatch(StJetCandidate *jetcnd, StJetSkimEvent *skim, int th, int shift = 0);
//AJP trigger
bool MatchAdjacentJetPatch(StJetCandidate *jetcnd, StJetSkimEvent *skim, int th, int shift = 0);
bool MatchBarrelAdjacentJetPatch(StJetCandidate *jetcnd, StJetSkimEvent *skim, int th, int shift = 0);
bool MatchEndcapAdjacentJetPatch(StJetCandidate *jetcnd, StJetSkimEvent *skim, int th, int shift = 0);
void GetBarrelAdjacentJetPatchEtaPhi(StJetCandidate *jetcnd, int i, float &eta, float &phi);
void GetEndcapAdjacentJetPatchEtaPhi(StJetCandidate *jetcnd, int i, float &eta, float &phi);

bool HitJetPatch(float deteta, float phi, float jpeta, float jpphi);

int checkpt(float pt);
//
#endif
